#################
#    NetBeans   #
#################

#Faire l'indentation automatique
maj + alt + f

#Auto-complétion
ctrl + espace

#Expression régulière pour rechercher les commentaires /** */ 
\/\*\*[^/]*\*\/

#Ajouter les assesseurs et les mutateurs
alt+inser

#################
#    Composer   #
#################

#Mettre à jour les paquets avec composer.json
composer update

#Mettre à jour le paquet avec composer.json
composer update NomDuPaquet

#################
#    Symfony2   #
#################

#Vider le cache symfony
app/console cache:clear --env=prod --no-warmup

#Pour mettre en prod (app.php) vider cache et lancer les assetics
php app/console assetic:dump --env=prod --no-debug

#################
#      TWIG     #
#################

#Pour utiliser une url absolue
{{ app.request.basepath }}/img/foo.jpg

#################
#    Doctrine   #
#################

#Pour créer les entités avec l'outil de doctrine
php app/console generate:doctrine:entity

#Créer la bdd
php app/console doctrine:database:create

#Afficher la requête SQL pour créer les entités 
php app/console doctrine:schema:update --dump-sql

#Créer les entités dans la bdd
php app/console doctrine:schema:update --force

#Générer les accesseurs et mutateurs (si des column ont été ajouté)
php app/console doctrine:generate:entities NipponjobAccueilBundle:Article

#Insérer les jeux de données fictives dans la bdd
php app/console doctrine:fixtures:load

#Générer un formulaire
php app/console generate:doctrine:form NipponjobAccueilBundle:Contact

#Vérifier qu'il n'y a pas d'erreur pour passer en prod
php app/console doctrine:ensure-production-settings --env=prod 

#Lister les entités
php app/console doctrine:mapping:info

#################
#    FOSUSER    #
#################

#Créer un utilisateur
php app/console fos:user:create

#################
#       Git     #
#################

#Pour s'approprier les commits
git config --global user.name "Your Name"
git config --global user.email you@example.com

#vérifier les différences par rapport au dernier commit
git status 

#Ajouter un fichier au prochain commit (obligatoire pour les nouveaux fichiers sinon commit -a suffit)
git add nomdefichier

#Envoiyer les modifications au dépot (-a pour ajouter les fichiers sinon il faut faire add de chaque fichier)
git commit -a

#Effacer un fichier/dossier (-r) du dépot mais pas du dossier
git rm --cached monfichier

#Annuler le dernier commit en conservant les modifications sur les fichiers
git reset --soft HEAD^

#Enlever les modifications sur les fichiers par rapport au dernier commit
git reset --hard HEAD^

# Créer une branche 
git branch nomdebranche

#Fusionner une branche
git merge nomdebranche

#Supprimer une branche
git -d nomdebranche

#changer de branch en deplaçant les modifications (en cas de travail sur une mauvaise branche)
git stash
git checkout nomdebranche

#Applique puis supprime le dernier stash
git stash pop

#Applique le dernier stash
git stash apply

#Supprimer le dernier stash
git stash drop

#################
#     Github    #
#################

# Si on utilise HTTPS
https://github.com/user/repo2.git

#Si on utilise SSH avec clef 
git@github.com:user/repo2.git 
